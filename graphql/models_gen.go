// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Category struct {
	Name  string `json:"name"`
	Count int    `json:"count"`
}

type DatabaseStats struct {
	TotalTorrents   int         `json:"totalTorrents"`
	TotalCategories int         `json:"totalCategories"`
	CategoryCounts  []*Category `json:"categoryCounts"`
}

type Query struct {
}

type Torrent struct {
	ID         string    `json:"id"`
	Name       string    `json:"name"`
	Category   string    `json:"category"`
	SizeMb     float64   `json:"sizeMB"`
	AddedDate  time.Time `json:"addedDate"`
	URL        string    `json:"url"`
	ImageURL   *string   `json:"imageURL,omitempty"`
	CsfdRating *int      `json:"csfdRating,omitempty"`
	CsfdURL    *string   `json:"csfdURL,omitempty"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
	Seeds      int       `json:"seeds"`
	Leeches    int       `json:"leeches"`
}

type TorrentConnection struct {
	Torrents        []*Torrent `json:"torrents"`
	TotalCount      int        `json:"totalCount"`
	HasNextPage     bool       `json:"hasNextPage"`
	HasPreviousPage bool       `json:"hasPreviousPage"`
}

type TorrentStats struct {
	ID         string    `json:"id"`
	TorrentID  string    `json:"torrentID"`
	Seeds      int       `json:"seeds"`
	Leeches    int       `json:"leeches"`
	RecordedAt time.Time `json:"recordedAt"`
}

type TorrentSortBy string

const (
	TorrentSortByNewest      TorrentSortBy = "NEWEST"
	TorrentSortByOldest      TorrentSortBy = "OLDEST"
	TorrentSortByNameAsc     TorrentSortBy = "NAME_ASC"
	TorrentSortByNameDesc    TorrentSortBy = "NAME_DESC"
	TorrentSortBySizeAsc     TorrentSortBy = "SIZE_ASC"
	TorrentSortBySizeDesc    TorrentSortBy = "SIZE_DESC"
	TorrentSortBySeedsDesc   TorrentSortBy = "SEEDS_DESC"
	TorrentSortByLeechesDesc TorrentSortBy = "LEECHES_DESC"
)

var AllTorrentSortBy = []TorrentSortBy{
	TorrentSortByNewest,
	TorrentSortByOldest,
	TorrentSortByNameAsc,
	TorrentSortByNameDesc,
	TorrentSortBySizeAsc,
	TorrentSortBySizeDesc,
	TorrentSortBySeedsDesc,
	TorrentSortByLeechesDesc,
}

func (e TorrentSortBy) IsValid() bool {
	switch e {
	case TorrentSortByNewest, TorrentSortByOldest, TorrentSortByNameAsc, TorrentSortByNameDesc, TorrentSortBySizeAsc, TorrentSortBySizeDesc, TorrentSortBySeedsDesc, TorrentSortByLeechesDesc:
		return true
	}
	return false
}

func (e TorrentSortBy) String() string {
	return string(e)
}

func (e *TorrentSortBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TorrentSortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TorrentSortBy", str)
	}
	return nil
}

func (e TorrentSortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TorrentSortBy) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TorrentSortBy) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
